import pytest

import jax
import jax.numpy as jnp
import warnings
from functools import partial

from powerbox.diff.tools import (
    _getbins,
    _magnitude_grid,
    above_mu_min_angular_generator,
    angular_average,
    angular_average_nd,
    get_power,
    regular_angular_generator,
)
from powerbox.powerbox import PowerBox

get_power = partial(get_power, bins_upto_boxlen=True)
angular_average = partial(angular_average, bins_upto_boxlen=True)
angular_average_nd = partial(angular_average_nd, bins_upto_boxlen=True)


def test_warn_interp_weights():
    x = jnp.linspace(-3, 3, 400)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = r2**-1.0
    P = jnp.repeat(P, 100).reshape(400, 400, 100)
    freq = [x, x, jnp.linspace(-2, 2, 100)]
    rng = jax.random.PRNGKey(0)
    # weights = jnp.random.rand(jnp.prod(P.shape)).reshape(P.shape)
    weights = jax.random.uniform(rng, P.shape)
    with pytest.warns(RuntimeWarning):
        angular_average(
            P,
            freq,
            bins=10,
            interpolation_method="linear",
            weights=weights,
            interp_points_generator=regular_angular_generator(),
        )


def test_bins_upto_boxlen_warning():
    with pytest.warns(
        FutureWarning,
        match="In the future, bins will be generated by default up to the smallest",
    ):
        _getbins(bins=10, coord_mags=jnp.ones((10, 10)), log=False)


@pytest.mark.parametrize("xmax", [1, 10, jnp.pi])
@pytest.mark.parametrize("ndim", [1, 2, 3])
def test_bins_upto_boxlen(xmax, ndim):
    x = jnp.linspace(-xmax, xmax, 21)
    mag = _magnitude_grid([x] * ndim)

    bins = _getbins(bins=12, coord_mags=mag, log=False, bins_upto_boxlen=True)
    assert bins.max() == xmax


@pytest.mark.parametrize("xmax", [1, 10, jnp.pi])
@pytest.mark.parametrize("ndim", [1, 2, 3])
def test_bins_upto_maxmag(xmax, ndim):
    x = jnp.linspace(-xmax, xmax, 21)
    mag = _magnitude_grid([x] * ndim)

    bins = _getbins(bins=12, coord_mags=mag, log=False, bins_upto_boxlen=False)
    assert jnp.isclose(bins.max(), xmax * jnp.sqrt(ndim))


@pytest.mark.parametrize("interpolation_method", [None, "linear"])
def test_angular_avg_nd_3(interpolation_method):
    x = jnp.linspace(-3, 3, 400)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = r2**-1.0
    P = jnp.repeat(P, 100).reshape(400, 400, 100)
    freq = [x, x, jnp.linspace(-2, 2, 100)]
    p_k, k_av_bins, sw = angular_average_nd(
        P,
        freq,
        bins=50,
        n=2,
        interpolation_method=interpolation_method,
        return_sumweights=True,
        bins_upto_boxlen=True,
    )
    if interpolation_method == "linear":
        assert jnp.max(jnp.abs((p_k[:, 0] - k_av_bins**-2.0) / k_av_bins**-2.0)) < 0.05
    else:
        # Without interpolation, the radially-averaged power is not very accurate
        # due to the low number of bins at small values of k_av_bins, so we start
        # the comparison at the 6th bin.
        assert (
            jnp.max(
                jnp.abs((p_k[6:, 0] - k_av_bins[6:] ** -2.0) / k_av_bins[6:] ** -2.0)
            )
            < 0.05
        )


def test_weights_shape():
    x = jnp.linspace(-3, 3, 40)
    P = jnp.ones(3 * [40])
    weights = jnp.ones(3 * [20])
    freq = [x for _ in range(3)]

    with pytest.raises(ValueError):
        p_k_lin, k_av_bins_lin = angular_average(
            P, freq, bins=10, weights=weights, bins_upto_boxlen=True
        )


@pytest.mark.parametrize("n", range(1, 5))
def test_interp_w_weights(n):
    x = jnp.linspace(-3, 3, 40)
    P = jnp.ones(n * [40])
    weights = jnp.ones_like(P)
    if n == 1:
        P[2:5] = 0
        weights[2:5] = 0
    elif n == 2:
        P[2:5, 2:5] = 0
        weights[2:5, 2:5] = 0
    elif n == 3:
        P[:4, 3:6, 7:10] = 0
        weights[:4, :, :] = 0
        weights[:, 3:6, :] = 0
        weights[:, :, 7:10] = 0
    else:
        P[:4, 3:6, 7:10, 1:2] = 0
        weights[:4, :, :, :] = 0
        weights[:, 3:6, :, :] = 0
        weights[:, :, 7:10, :] = 0
        weights[:, :, :, 1:2] = 0

    # Test 4D avg works
    freq = [x for _ in range(n)]
    p_k_lin, k_av_bins_lin = angular_average(
        P,
        freq,
        bins=10,
        interpolation_method="linear",
        weights=weights,
        interp_points_generator=regular_angular_generator(),
        log_bins=True,
        bins_upto_boxlen=True,
    )

    assert jnp.all(p_k_lin == 1.0)


@pytest.mark.parametrize("n", range(1, 3))
def test_zero_ki(n):
    x = jnp.arange(-100, 100, 1)
    from powerbox.tools import ignore_zero_ki

    # needed only for shape
    freq = n * [x]
    coords = jnp.array(jnp.meshgrid(*freq))
    kmag = jnp.sqrt(jnp.sum(coords**2, axis=0))
    weights = ignore_zero_ki(freq, kmag)
    L = x[-1] - x[0] + 1
    masked_points = jnp.sum(weights == 0)
    if n == 1:
        assert masked_points == 1
    elif n == 2:
        assert masked_points == n * L - 1
    elif n == 3:
        assert masked_points == n * L**2 - n * L + 1
    else:
        assert masked_points == n * L**3 - n * L**2 + n * L - 1


@pytest.mark.parametrize("n", range(2, 3))
def test_interp_w_mu(n):
    x = jnp.linspace(0.0, 3, 40)
    if n == 2:
        kpar_mesh, kperp_mesh = jnp.meshgrid(x, x)
        with warnings.catch_warnings():
            warnings.filterwarnings(
                "ignore", message="divide by zero encountered in divide"
            )
            theta = jnp.arctan2(kperp_mesh, kpar_mesh)
        mu_mesh = jnp.cos(theta)
    else:
        kx_mesh, ky_mesh, kz_mesh = jnp.meshgrid(x, x, x, indexing="ij")
        theta = jnp.arccos(kz_mesh / jnp.sqrt(kx_mesh**2 + ky_mesh**2 + kz_mesh**2))
        mu_mesh = jnp.cos(theta)

    # Need a little cushion so we test against data at mu = 0.95
    # If we test for mu that is higher (default is mu >= 0.97)
    # and put the data also only at mu >= 0.97, then the interped average will
    # not be 1. at low radii so the test fails.
    mask = mu_mesh >= 0.95
    P = jnp.zeros(mask.shape)
    P[mask] = 1.0

    p_k_lin, k_av_bins_lin = angular_average(
        P,
        n * [x],
        bins=10,
        interpolation_method="linear",
        weights=1.0,
        interp_points_generator=above_mu_min_angular_generator(),
        bins_upto_boxlen=True,
    )
    # Start from the 4th bin due to the average being a bit < 1 at low radii
    assert jnp.all(p_k_lin[3:] == 1.0)


def test_error_coords_and_mask():
    x = jnp.linspace(1.0, 3, 40)
    kpar_mesh, kperp_mesh = jnp.meshgrid(x, x)
    theta = jnp.arctan2(kperp_mesh, kpar_mesh)
    mu_mesh = jnp.cos(theta)

    mask = mu_mesh >= 0.97
    P = jnp.zeros(mask.shape)
    P[mask] = 1.0
    with pytest.raises(ValueError):
        p_k_lin, k_av_bins_lin = angular_average(
            P,
            [x, x],
            bins=10,
            interpolation_method="linear",
            weights=1.0,
            interp_points_generator=above_mu_min_angular_generator(mu=0.97),
            bins_upto_boxlen=True,
        )


def test_interp_method():
    x = jnp.linspace(-3, 3, 40)
    P = jnp.ones((40, 40, 40))
    freq = [x, x, x]
    with pytest.raises(ValueError):
        angular_average_nd(
            P,
            freq,
            bins=20,
            get_variance=True,
            interpolation_method="abc",
            bins_upto_boxlen=True,
        )

    with pytest.raises(ValueError):
        angular_average(
            P,
            freq,
            bins=20,
            get_variance=True,
            interpolation_method="abc",
            bins_upto_boxlen=True,
        )


def test_error_w_kmag_coords():
    x = jnp.linspace(-3, 3, 40)
    P = jnp.ones((40, 40, 40))
    X, Y = jnp.meshgrid(x, x)

    with pytest.raises(ValueError):
        angular_average_nd(P, X**2 + Y**2, bins=20, interpolation_method="linear")

    x = jnp.linspace(-3, 3, 40)
    P = jnp.ones((40, 40, 40))
    X, Y = jnp.meshgrid(x, x)

    with pytest.raises(ValueError):
        angular_average(P, X**2 + Y**2, bins=20, interpolation_method="linear")


def test_kmag_coords_nointerp():
    x = jnp.linspace(-3, 3, 40)
    P = jnp.ones((40, 40, 40))
    X, Y = jnp.meshgrid(x, x)
    with pytest.raises(ValueError):
        angular_average_nd(P, jnp.sqrt(X**2 + Y**2), bins=20, interpolation_method=None)
    with pytest.raises(ValueError):
        angular_average(P, jnp.sqrt(X**2 + Y**2), bins=20, interpolation_method=None)


@pytest.mark.parametrize("n", range(1, 3))
def test_angular_avg_nd(n):
    x = jnp.linspace(-3, 3, 40)
    X, Y, Z = jnp.meshgrid(x, x, x)
    r2 = X**2 + Y**2 + Z**2
    P = r2**-1.0

    # Test 4D avg works
    P = jnp.repeat(P, 10).reshape(40, 40, 40, 10)
    freq = [x, x, x, jnp.linspace(-2, 2, 10)]

    p_k_lin, k_av_bins_lin = angular_average_nd(
        P, freq, bins=10, n=n, interpolation_method="linear", bins_upto_boxlen=True
    )

    if n == 1:
        # Without interpolation, the radially-averaged power is not very accurate
        # due to the low number of bins at small values of k_av_bins, so we start
        # the comparison at the 6th bin.
        assert (
            jnp.max(
                jnp.abs(
                    (
                        p_k_lin[6:, len(x) // 2, len(x) // 2, 0]
                        - k_av_bins_lin[6:] ** -2.0
                    )
                    / k_av_bins_lin[6:] ** -2.0
                )
            )
            < 0.05
        )
    elif n == 2:
        assert (
            jnp.max(
                jnp.abs(
                    (p_k_lin[:, len(x) // 2, 0] - k_av_bins_lin**-2.0)
                    / k_av_bins_lin**-2.0
                )
            )
            < 0.05
        )
    else:
        assert (
            jnp.max(
                jnp.abs((p_k_lin[:, 0] - k_av_bins_lin**-2.0) / k_av_bins_lin**-2.0)
            )
            < 0.05
        )


def test_angular_avg_nd_complex_interp():
    x = jnp.linspace(-3, 3, 400)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = r2**-1.0 + 1j * r2**-1.0
    P = jnp.repeat(P, 100).reshape(400, 400, 100)
    freq = [x, x, jnp.linspace(-2, 2, 100)]
    p_k_lin, k_av_bins_lin = angular_average_nd(
        P, freq, bins=50, n=2, interpolation_method="linear", bins_upto_boxlen=True
    )
    real = jnp.real(p_k_lin)
    imag = jnp.imag(p_k_lin)
    assert (
        jnp.max(jnp.abs((real[:, 0] - k_av_bins_lin**-2.0) / k_av_bins_lin**-2.0))
        < 0.05
    )

    assert jnp.isclose(real, imag).all()


@pytest.mark.parametrize("interpolation_method", [None, "linear"])
def test_angular_avg_nd_4_2(interpolation_method):
    x = jnp.linspace(-3, 3, 200)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = r2**-1.0
    P = jnp.repeat(P, 10).reshape(200, 200, 10)
    P = jnp.repeat(P, 10).reshape(200, 200, 10, 10)

    freq = [x, x, jnp.linspace(-2, 2, 10), jnp.linspace(-2, 2, 10)]
    p_k, k_av_bins = angular_average_nd(P, freq, bins=50, n=2)
    p_k_lin, k_av_bins_lin = angular_average_nd(
        P,
        freq,
        bins=50,
        n=2,
        interpolation_method=interpolation_method,
        bins_upto_boxlen=True,
    )
    # The radially-averaged power is not very accurate
    # due to the low number of bins at small values of k_av_bins, so we start
    # the comparison at the 6th bin.
    assert (
        jnp.max(
            jnp.abs(
                (p_k_lin[6:, 0, 0] - k_av_bins_lin[6:] ** -2.0)
                / k_av_bins_lin[6:] ** -2.0
            )
        )
        < 0.06
    )


def test_var_not_impl():
    x = jnp.linspace(-3, 3, 200)
    P = jnp.ones((200, 10))
    coords = [x, jnp.linspace(-2, 2, 10)]
    with pytest.raises(NotImplementedError):
        ave, coord, var = angular_average(
            P, coords, bins=20, get_variance=True, interpolation_method="linear"
        )
    with pytest.raises(NotImplementedError):
        ave, coord, var = angular_average_nd(
            P, coords, bins=20, get_variance=True, interpolation_method="linear"
        )


def test_angular_avg_nd_2_1_varnull():
    x = jnp.linspace(-3, 3, 200)

    P = jnp.ones((200, 10))

    coords = [x, jnp.linspace(-2, 2, 10)]
    p_k, k_av_bins, var, sw = angular_average_nd(
        P,
        coords,
        bins=20,
        n=1,
        get_variance=True,
        return_sumweights=True,
        bins_upto_boxlen=True,
    )

    assert jnp.all(var == 0)


def test_null_variance_2d():
    x = jnp.linspace(-3, 3, 400)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = jnp.ones_like(r2)
    ave, coord, var = angular_average(
        P,
        jnp.sqrt(r2),
        bins=jnp.linspace(0, x.max(), 20),
        get_variance=True,
        bins_upto_boxlen=True,
    )
    assert jnp.all(var == 0)


def test_variance_2d():
    x = jnp.linspace(-3, 3, 400)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = jnp.ones_like(r2)
    P += jnp.random.normal(scale=1, size=(len(x), len(x)))
    ave, coord, var = angular_average(
        P,
        jnp.sqrt(r2),
        bins=jnp.linspace(0, x.max(), 20),
        get_variance=True,
        bins_upto_boxlen=True,
    )
    assert jnp.all(jnp.diff(var) <= 0)


def test_complex_variance():
    x = jnp.linspace(-3, 3, 400)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = jnp.ones_like(r2) + jnp.ones_like(r2) * 1j
    with pytest.raises(NotImplementedError):
        ave, coord, var = angular_average(
            P,
            jnp.sqrt(r2),
            bins=jnp.linspace(0, x.max(), 20),
            get_variance=True,
            bins_upto_boxlen=True,
        )


def test_bin_edges():
    x = jnp.linspace(-3, 3, 200)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = r2**-1.0
    bins = jnp.linspace(0, x.max(), 20)
    ave, coord = angular_average(
        P, jnp.sqrt(r2), bins=bins, bin_ave=False, bins_upto_boxlen=True
    )
    assert jnp.all(coord == bins)


def test_sum():
    x = jnp.linspace(-3, 3, 200)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = r2**-1.0
    ave, coord = angular_average(
        P, jnp.sqrt(r2), bins=20, bin_ave=False, average=False, bins_upto_boxlen=True
    )
    assert jnp.sum(P[r2 < 9.0]) == jnp.sum(ave)

    ave, coord = angular_average(
        P, jnp.sqrt(r2), bins=20, bin_ave=True, average=False, bins_upto_boxlen=True
    )
    assert jnp.sum(P[r2 < 9.0]) == jnp.sum(ave)


def test_var_trivial_weights():
    x = jnp.linspace(-3, 3, 400)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = jnp.ones_like(r2)
    P += jnp.random.normal(scale=1, size=(len(x), len(x)))
    ave, coord, var = angular_average(
        P,
        jnp.sqrt(r2),
        bins=jnp.linspace(0, x.max(), 20),
        get_variance=True,
        weights=jnp.ones_like(r2),
        bins_upto_boxlen=True,
    )
    print(jnp.diff(var))
    assert jnp.all(jnp.diff(var) <= 1e-6)


def test_logbins():
    x = jnp.linspace(-3, 3, 400)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    P = jnp.ones_like(r2)
    ave, coord = angular_average(
        P, jnp.sqrt(r2), bins=10, bin_ave=False, log_bins=True, bins_upto_boxlen=True
    )

    assert jnp.all(jnp.isclose(jnp.diff(coord[1:] / coord[:-1]), 0))


def test_cross_power_identity():
    pb = PowerBox(200, dim=2, pk=lambda k: 1.0 * k**-2.0, boxlength=1.0, b=1)
    dx = pb.delta_x()
    p, k = get_power(dx, pb.boxlength, b=1)
    p_cross, k = get_power(dx, pb.boxlength, b=1, deltax2=dx)
    assert jnp.all(jnp.isclose(p, p_cross))
    p, k = get_power(dx, [1, 1], b=1)
    p_cross, k = get_power(dx, [1, 1], b=1, deltax2=dx)
    assert jnp.all(jnp.isclose(p, p_cross))


@pytest.mark.skip()
def test_against_multirealisation():
    x = jnp.linspace(-3, 3, 1000)
    X, Y = jnp.meshgrid(x, x)
    r2 = X**2 + Y**2
    bins = jnp.linspace(0, x.max(), 20)

    # Get the variance from several realisations
    ave = [0] * 50
    for j in range(50):
        P = jnp.ones_like(r2) + jnp.random.normal(scale=1, size=(len(x), len(x)))
        ave[j], coord = angular_average(P, jnp.sqrt(r2), bins=bins)

    var = jnp.var(jnp.array(ave), axis=0)

    # Get the variance from a single realisation
    ave, coord, var2 = angular_average(P, jnp.sqrt(r2), bins=bins, get_variance=True)

    print(var)
    print(var2)
    assert jnp.all(jnp.isclose(var, var2, 1e-2))
